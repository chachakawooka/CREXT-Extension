//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var general_ttypes = require('./general_types');


var ttypes = module.exports = {};
var ExecuteByteCodeResult = module.exports.ExecuteByteCodeResult = function(args) {
  this.status = null;
  this.results = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [null]);
    }
  }
};
ExecuteByteCodeResult.prototype = {};
ExecuteByteCodeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.results = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.SetterMethodResult();
          elem6.read(input);
          this.results.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecuteByteCodeResult.prototype.write = function(output) {
  output.writeStructBegin('ExecuteByteCodeResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter7 in this.results)
    {
      if (this.results.hasOwnProperty(iter7))
      {
        iter7 = this.results[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetterMethodResult = module.exports.SetterMethodResult = function(args) {
  this.status = null;
  this.ret_val = null;
  this.contractsState = null;
  this.emittedTransactions = null;
  this.executionCost = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.ret_val !== undefined && args.ret_val !== null) {
      this.ret_val = new general_ttypes.Variant(args.ret_val);
    }
    if (args.contractsState !== undefined && args.contractsState !== null) {
      this.contractsState = Thrift.copyMap(args.contractsState, [null]);
    }
    if (args.emittedTransactions !== undefined && args.emittedTransactions !== null) {
      this.emittedTransactions = Thrift.copyList(args.emittedTransactions, [null]);
    }
    if (args.executionCost !== undefined && args.executionCost !== null) {
      this.executionCost = args.executionCost;
    }
  }
};
SetterMethodResult.prototype = {};
SetterMethodResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ret_val = new general_ttypes.Variant();
        this.ret_val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.contractsState = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readBinary();
          val15 = input.readBinary();
          this.contractsState[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.emittedTransactions = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.EmittedTransaction();
          elem22.read(input);
          this.emittedTransactions.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.executionCost = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetterMethodResult.prototype.write = function(output) {
  output.writeStructBegin('SetterMethodResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ret_val !== null && this.ret_val !== undefined) {
    output.writeFieldBegin('ret_val', Thrift.Type.STRUCT, 2);
    this.ret_val.write(output);
    output.writeFieldEnd();
  }
  if (this.contractsState !== null && this.contractsState !== undefined) {
    output.writeFieldBegin('contractsState', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contractsState));
    for (var kiter23 in this.contractsState)
    {
      if (this.contractsState.hasOwnProperty(kiter23))
      {
        var viter24 = this.contractsState[kiter23];
        output.writeBinary(kiter23);
        output.writeBinary(viter24);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.emittedTransactions !== null && this.emittedTransactions !== undefined) {
    output.writeFieldBegin('emittedTransactions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.emittedTransactions.length);
    for (var iter25 in this.emittedTransactions)
    {
      if (this.emittedTransactions.hasOwnProperty(iter25))
      {
        iter25 = this.emittedTransactions[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.executionCost !== null && this.executionCost !== undefined) {
    output.writeFieldBegin('executionCost', Thrift.Type.I64, 5);
    output.writeI64(this.executionCost);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EmittedTransaction = module.exports.EmittedTransaction = function(args) {
  this.source = null;
  this.target = null;
  this.amount = null;
  this.userData = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = new general_ttypes.Amount(args.amount);
    }
    if (args.userData !== undefined && args.userData !== null) {
      this.userData = args.userData;
    }
  }
};
EmittedTransaction.prototype = {};
EmittedTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.amount = new general_ttypes.Amount();
        this.amount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmittedTransaction.prototype.write = function(output) {
  output.writeStructBegin('EmittedTransaction');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeBinary(this.source);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 2);
    output.writeBinary(this.target);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRUCT, 3);
    this.amount.write(output);
    output.writeFieldEnd();
  }
  if (this.userData !== null && this.userData !== undefined) {
    output.writeFieldBegin('userData', Thrift.Type.STRING, 4);
    output.writeBinary(this.userData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetterMethodResult = module.exports.GetterMethodResult = function(args) {
  this.status = null;
  this.ret_val = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.ret_val !== undefined && args.ret_val !== null) {
      this.ret_val = new general_ttypes.Variant(args.ret_val);
    }
  }
};
GetterMethodResult.prototype = {};
GetterMethodResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ret_val = new general_ttypes.Variant();
        this.ret_val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetterMethodResult.prototype.write = function(output) {
  output.writeStructBegin('GetterMethodResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ret_val !== null && this.ret_val !== undefined) {
    output.writeFieldBegin('ret_val', Thrift.Type.STRUCT, 2);
    this.ret_val.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecuteByteCodeMultipleResult = module.exports.ExecuteByteCodeMultipleResult = function(args) {
  this.status = null;
  this.results = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [ttypes.GetterMethodResult]);
    }
  }
};
ExecuteByteCodeMultipleResult.prototype = {};
ExecuteByteCodeMultipleResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.results = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new ttypes.GetterMethodResult();
          elem32.read(input);
          this.results.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecuteByteCodeMultipleResult.prototype.write = function(output) {
  output.writeStructBegin('ExecuteByteCodeMultipleResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter33 in this.results)
    {
      if (this.results.hasOwnProperty(iter33))
      {
        iter33 = this.results[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetContractMethodsResult = module.exports.GetContractMethodsResult = function(args) {
  this.status = null;
  this.methods = null;
  this.tokenStandard = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.methods !== undefined && args.methods !== null) {
      this.methods = Thrift.copyList(args.methods, [general_ttypes.MethodDescription]);
    }
    if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
      this.tokenStandard = args.tokenStandard;
    }
  }
};
GetContractMethodsResult.prototype = {};
GetContractMethodsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.methods = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new general_ttypes.MethodDescription();
          elem40.read(input);
          this.methods.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.tokenStandard = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetContractMethodsResult.prototype.write = function(output) {
  output.writeStructBegin('GetContractMethodsResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.methods !== null && this.methods !== undefined) {
    output.writeFieldBegin('methods', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.methods.length);
    for (var iter41 in this.methods)
    {
      if (this.methods.hasOwnProperty(iter41))
      {
        iter41 = this.methods[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
    output.writeFieldBegin('tokenStandard', Thrift.Type.I64, 3);
    output.writeI64(this.tokenStandard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetContractVariablesResult = module.exports.GetContractVariablesResult = function(args) {
  this.status = null;
  this.contractVariables = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.contractVariables !== undefined && args.contractVariables !== null) {
      this.contractVariables = Thrift.copyMap(args.contractVariables, [general_ttypes.Variant]);
    }
  }
};
GetContractVariablesResult.prototype = {};
GetContractVariablesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size42 = 0;
        var _rtmp346;
        this.contractVariables = {};
        var _ktype43 = 0;
        var _vtype44 = 0;
        _rtmp346 = input.readMapBegin();
        _ktype43 = _rtmp346.ktype;
        _vtype44 = _rtmp346.vtype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var key48 = null;
          var val49 = null;
          key48 = input.readString();
          val49 = new general_ttypes.Variant();
          val49.read(input);
          this.contractVariables[key48] = val49;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetContractVariablesResult.prototype.write = function(output) {
  output.writeStructBegin('GetContractVariablesResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.contractVariables !== null && this.contractVariables !== undefined) {
    output.writeFieldBegin('contractVariables', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.contractVariables));
    for (var kiter50 in this.contractVariables)
    {
      if (this.contractVariables.hasOwnProperty(kiter50))
      {
        var viter51 = this.contractVariables[kiter50];
        output.writeString(kiter50);
        viter51.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompileSourceCodeResult = module.exports.CompileSourceCodeResult = function(args) {
  this.status = null;
  this.byteCodeObjects = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [general_ttypes.ByteCodeObject]);
    }
  }
};
CompileSourceCodeResult.prototype = {};
CompileSourceCodeResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.byteCodeObjects = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new general_ttypes.ByteCodeObject();
          elem58.read(input);
          this.byteCodeObjects.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompileSourceCodeResult.prototype.write = function(output) {
  output.writeStructBegin('CompileSourceCodeResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter59 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter59))
      {
        iter59 = this.byteCodeObjects[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SmartContractBinary = module.exports.SmartContractBinary = function(args) {
  this.contractAddress = null;
  this.object = null;
  this.stateCanModify = null;
  if (args) {
    if (args.contractAddress !== undefined && args.contractAddress !== null) {
      this.contractAddress = args.contractAddress;
    }
    if (args.object !== undefined && args.object !== null) {
      this.object = new general_ttypes.ClassObject(args.object);
    }
    if (args.stateCanModify !== undefined && args.stateCanModify !== null) {
      this.stateCanModify = args.stateCanModify;
    }
  }
};
SmartContractBinary.prototype = {};
SmartContractBinary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contractAddress = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.object = new general_ttypes.ClassObject();
        this.object.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.stateCanModify = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractBinary.prototype.write = function(output) {
  output.writeStructBegin('SmartContractBinary');
  if (this.contractAddress !== null && this.contractAddress !== undefined) {
    output.writeFieldBegin('contractAddress', Thrift.Type.STRING, 1);
    output.writeBinary(this.contractAddress);
    output.writeFieldEnd();
  }
  if (this.object !== null && this.object !== undefined) {
    output.writeFieldBegin('object', Thrift.Type.STRUCT, 2);
    this.object.write(output);
    output.writeFieldEnd();
  }
  if (this.stateCanModify !== null && this.stateCanModify !== undefined) {
    output.writeFieldBegin('stateCanModify', Thrift.Type.BOOL, 3);
    output.writeBool(this.stateCanModify);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MethodHeader = module.exports.MethodHeader = function(args) {
  this.methodName = null;
  this.params = null;
  if (args) {
    if (args.methodName !== undefined && args.methodName !== null) {
      this.methodName = args.methodName;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
    }
  }
};
MethodHeader.prototype = {};
MethodHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.methodName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.params = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = new general_ttypes.Variant();
          elem66.read(input);
          this.params.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MethodHeader.prototype.write = function(output) {
  output.writeStructBegin('MethodHeader');
  if (this.methodName !== null && this.methodName !== undefined) {
    output.writeFieldBegin('methodName', Thrift.Type.STRING, 1);
    output.writeString(this.methodName);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter67 in this.params)
    {
      if (this.params.hasOwnProperty(iter67))
      {
        iter67 = this.params[iter67];
        iter67.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExecutorBuildVersionResult = module.exports.ExecutorBuildVersionResult = function(args) {
  this.status = null;
  this.commitNumber = null;
  this.commitHash = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new general_ttypes.APIResponse(args.status);
    }
    if (args.commitNumber !== undefined && args.commitNumber !== null) {
      this.commitNumber = args.commitNumber;
    }
    if (args.commitHash !== undefined && args.commitHash !== null) {
      this.commitHash = args.commitHash;
    }
  }
};
ExecutorBuildVersionResult.prototype = {};
ExecutorBuildVersionResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new general_ttypes.APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.commitNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.commitHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutorBuildVersionResult.prototype.write = function(output) {
  output.writeStructBegin('ExecutorBuildVersionResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.commitNumber !== null && this.commitNumber !== undefined) {
    output.writeFieldBegin('commitNumber', Thrift.Type.I32, 2);
    output.writeI32(this.commitNumber);
    output.writeFieldEnd();
  }
  if (this.commitHash !== null && this.commitHash !== undefined) {
    output.writeFieldBegin('commitHash', Thrift.Type.STRING, 3);
    output.writeString(this.commitHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

