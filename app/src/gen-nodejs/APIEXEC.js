//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var general_ttypes = require('./general_types');
var api_ttypes = require('./api_types');


var ttypes = require('./apiexec_types');
//HELPER FUNCTIONS AND STRUCTURES

var APIEXEC_GetSeed_args = function(args) {
  this.accessId = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
  }
};
APIEXEC_GetSeed_args.prototype = {};
APIEXEC_GetSeed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_GetSeed_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_GetSeed_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_GetSeed_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetSeedResult(args.success);
    }
  }
};
APIEXEC_GetSeed_result.prototype = {};
APIEXEC_GetSeed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetSeedResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_GetSeed_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_GetSeed_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_SendTransaction_args = function(args) {
  this.accessId = null;
  this.transaction = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new api_ttypes.Transaction(args.transaction);
    }
  }
};
APIEXEC_SendTransaction_args.prototype = {};
APIEXEC_SendTransaction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new api_ttypes.Transaction();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_SendTransaction_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_SendTransaction_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_SendTransaction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SendTransactionResult(args.success);
    }
  }
};
APIEXEC_SendTransaction_result.prototype = {};
APIEXEC_SendTransaction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SendTransactionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_SendTransaction_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_SendTransaction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_SmartContractGet_args = function(args) {
  this.accessId = null;
  this.address = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
APIEXEC_SmartContractGet_args.prototype = {};
APIEXEC_SmartContractGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_SmartContractGet_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_SmartContractGet_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_SmartContractGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SmartContractGetResult(args.success);
    }
  }
};
APIEXEC_SmartContractGet_result.prototype = {};
APIEXEC_SmartContractGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SmartContractGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_SmartContractGet_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_SmartContractGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_WalletIdGet_args = function(args) {
  this.accessId = null;
  this.address = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
APIEXEC_WalletIdGet_args.prototype = {};
APIEXEC_WalletIdGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_WalletIdGet_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_WalletIdGet_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_WalletIdGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new api_ttypes.WalletIdGetResult(args.success);
    }
  }
};
APIEXEC_WalletIdGet_result.prototype = {};
APIEXEC_WalletIdGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new api_ttypes.WalletIdGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_WalletIdGet_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_WalletIdGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_WalletBalanceGet_args = function(args) {
  this.address = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
APIEXEC_WalletBalanceGet_args.prototype = {};
APIEXEC_WalletBalanceGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_WalletBalanceGet_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_WalletBalanceGet_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_WalletBalanceGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new api_ttypes.WalletBalanceGetResult(args.success);
    }
  }
};
APIEXEC_WalletBalanceGet_result.prototype = {};
APIEXEC_WalletBalanceGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new api_ttypes.WalletBalanceGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_WalletBalanceGet_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_WalletBalanceGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_PoolGet_args = function(args) {
  this.sequence = null;
  if (args) {
    if (args.sequence !== undefined && args.sequence !== null) {
      this.sequence = args.sequence;
    }
  }
};
APIEXEC_PoolGet_args.prototype = {};
APIEXEC_PoolGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sequence = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_PoolGet_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_PoolGet_args');
  if (this.sequence !== null && this.sequence !== undefined) {
    output.writeFieldBegin('sequence', Thrift.Type.I64, 1);
    output.writeI64(this.sequence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_PoolGet_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PoolGetResult(args.success);
    }
  }
};
APIEXEC_PoolGet_result.prototype = {};
APIEXEC_PoolGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PoolGetResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_PoolGet_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_PoolGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_GetDateTime_args = function(args) {
  this.accessId = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
  }
};
APIEXEC_GetDateTime_args.prototype = {};
APIEXEC_GetDateTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_GetDateTime_args.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_GetDateTime_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXEC_GetDateTime_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetDateTimeResult(args.success);
    }
  }
};
APIEXEC_GetDateTime_result.prototype = {};
APIEXEC_GetDateTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetDateTimeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIEXEC_GetDateTime_result.prototype.write = function(output) {
  output.writeStructBegin('APIEXEC_GetDateTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var APIEXECClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
APIEXECClient.prototype = {};
APIEXECClient.prototype.seqid = function() { return this._seqid; };
APIEXECClient.prototype.new_seqid = function() { return this._seqid += 1; };
APIEXECClient.prototype.GetSeed = function(accessId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetSeed(accessId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetSeed(accessId);
  }
};

APIEXECClient.prototype.send_GetSeed = function(accessId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetSeed', Thrift.MessageType.CALL, this.seqid());
  var params = {
    accessId: accessId
  };
  var args = new APIEXEC_GetSeed_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

APIEXECClient.prototype.recv_GetSeed = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new APIEXEC_GetSeed_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetSeed failed: unknown result');
};
APIEXECClient.prototype.SendTransaction = function(accessId, transaction, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SendTransaction(accessId, transaction);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SendTransaction(accessId, transaction);
  }
};

APIEXECClient.prototype.send_SendTransaction = function(accessId, transaction) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('SendTransaction', Thrift.MessageType.CALL, this.seqid());
  var params = {
    accessId: accessId,
    transaction: transaction
  };
  var args = new APIEXEC_SendTransaction_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

APIEXECClient.prototype.recv_SendTransaction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new APIEXEC_SendTransaction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SendTransaction failed: unknown result');
};
APIEXECClient.prototype.SmartContractGet = function(accessId, address, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SmartContractGet(accessId, address);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SmartContractGet(accessId, address);
  }
};

APIEXECClient.prototype.send_SmartContractGet = function(accessId, address) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('SmartContractGet', Thrift.MessageType.CALL, this.seqid());
  var params = {
    accessId: accessId,
    address: address
  };
  var args = new APIEXEC_SmartContractGet_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

APIEXECClient.prototype.recv_SmartContractGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new APIEXEC_SmartContractGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SmartContractGet failed: unknown result');
};
APIEXECClient.prototype.WalletIdGet = function(accessId, address, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_WalletIdGet(accessId, address);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_WalletIdGet(accessId, address);
  }
};

APIEXECClient.prototype.send_WalletIdGet = function(accessId, address) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('WalletIdGet', Thrift.MessageType.CALL, this.seqid());
  var params = {
    accessId: accessId,
    address: address
  };
  var args = new APIEXEC_WalletIdGet_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

APIEXECClient.prototype.recv_WalletIdGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new APIEXEC_WalletIdGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('WalletIdGet failed: unknown result');
};
APIEXECClient.prototype.WalletBalanceGet = function(address, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_WalletBalanceGet(address);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_WalletBalanceGet(address);
  }
};

APIEXECClient.prototype.send_WalletBalanceGet = function(address) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('WalletBalanceGet', Thrift.MessageType.CALL, this.seqid());
  var params = {
    address: address
  };
  var args = new APIEXEC_WalletBalanceGet_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

APIEXECClient.prototype.recv_WalletBalanceGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new APIEXEC_WalletBalanceGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('WalletBalanceGet failed: unknown result');
};
APIEXECClient.prototype.PoolGet = function(sequence, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PoolGet(sequence);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PoolGet(sequence);
  }
};

APIEXECClient.prototype.send_PoolGet = function(sequence) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('PoolGet', Thrift.MessageType.CALL, this.seqid());
  var params = {
    sequence: sequence
  };
  var args = new APIEXEC_PoolGet_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

APIEXECClient.prototype.recv_PoolGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new APIEXEC_PoolGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PoolGet failed: unknown result');
};
APIEXECClient.prototype.GetDateTime = function(accessId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetDateTime(accessId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetDateTime(accessId);
  }
};

APIEXECClient.prototype.send_GetDateTime = function(accessId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetDateTime', Thrift.MessageType.CALL, this.seqid());
  var params = {
    accessId: accessId
  };
  var args = new APIEXEC_GetDateTime_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

APIEXECClient.prototype.recv_GetDateTime = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new APIEXEC_GetDateTime_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetDateTime failed: unknown result');
};
var APIEXECProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
APIEXECProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
APIEXECProcessor.prototype.process_GetSeed = function(seqid, input, output) {
  var args = new APIEXEC_GetSeed_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetSeed.length === 1) {
    Q.fcall(this._handler.GetSeed.bind(this._handler), args.accessId)
      .then(function(result) {
        var result_obj = new APIEXEC_GetSeed_result({success: result});
        output.writeMessageBegin("GetSeed", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetSeed", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetSeed(args.accessId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new APIEXEC_GetSeed_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetSeed", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetSeed", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIEXECProcessor.prototype.process_SendTransaction = function(seqid, input, output) {
  var args = new APIEXEC_SendTransaction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SendTransaction.length === 2) {
    Q.fcall(this._handler.SendTransaction.bind(this._handler), args.accessId, args.transaction)
      .then(function(result) {
        var result_obj = new APIEXEC_SendTransaction_result({success: result});
        output.writeMessageBegin("SendTransaction", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SendTransaction", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.SendTransaction(args.accessId, args.transaction, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new APIEXEC_SendTransaction_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SendTransaction", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SendTransaction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIEXECProcessor.prototype.process_SmartContractGet = function(seqid, input, output) {
  var args = new APIEXEC_SmartContractGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SmartContractGet.length === 2) {
    Q.fcall(this._handler.SmartContractGet.bind(this._handler), args.accessId, args.address)
      .then(function(result) {
        var result_obj = new APIEXEC_SmartContractGet_result({success: result});
        output.writeMessageBegin("SmartContractGet", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartContractGet", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.SmartContractGet(args.accessId, args.address, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new APIEXEC_SmartContractGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SmartContractGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SmartContractGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIEXECProcessor.prototype.process_WalletIdGet = function(seqid, input, output) {
  var args = new APIEXEC_WalletIdGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.WalletIdGet.length === 2) {
    Q.fcall(this._handler.WalletIdGet.bind(this._handler), args.accessId, args.address)
      .then(function(result) {
        var result_obj = new APIEXEC_WalletIdGet_result({success: result});
        output.writeMessageBegin("WalletIdGet", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("WalletIdGet", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.WalletIdGet(args.accessId, args.address, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new APIEXEC_WalletIdGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("WalletIdGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("WalletIdGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIEXECProcessor.prototype.process_WalletBalanceGet = function(seqid, input, output) {
  var args = new APIEXEC_WalletBalanceGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.WalletBalanceGet.length === 1) {
    Q.fcall(this._handler.WalletBalanceGet.bind(this._handler), args.address)
      .then(function(result) {
        var result_obj = new APIEXEC_WalletBalanceGet_result({success: result});
        output.writeMessageBegin("WalletBalanceGet", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("WalletBalanceGet", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.WalletBalanceGet(args.address, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new APIEXEC_WalletBalanceGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("WalletBalanceGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("WalletBalanceGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIEXECProcessor.prototype.process_PoolGet = function(seqid, input, output) {
  var args = new APIEXEC_PoolGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PoolGet.length === 1) {
    Q.fcall(this._handler.PoolGet.bind(this._handler), args.sequence)
      .then(function(result) {
        var result_obj = new APIEXEC_PoolGet_result({success: result});
        output.writeMessageBegin("PoolGet", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PoolGet", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.PoolGet(args.sequence, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new APIEXEC_PoolGet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("PoolGet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PoolGet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
APIEXECProcessor.prototype.process_GetDateTime = function(seqid, input, output) {
  var args = new APIEXEC_GetDateTime_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetDateTime.length === 1) {
    Q.fcall(this._handler.GetDateTime.bind(this._handler), args.accessId)
      .then(function(result) {
        var result_obj = new APIEXEC_GetDateTime_result({success: result});
        output.writeMessageBegin("GetDateTime", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetDateTime", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetDateTime(args.accessId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new APIEXEC_GetDateTime_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetDateTime", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetDateTime", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
