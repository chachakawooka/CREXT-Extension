//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var general_ttypes = require('./general_types');


var ttypes = require('./executor_types');
//HELPER FUNCTIONS AND STRUCTURES

var ContractExecutor_executeByteCode_args = function(args) {
  this.accessId = null;
  this.initiatorAddress = null;
  this.invokedContract = null;
  this.methods = null;
  this.executionTime = null;
  this.version = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
    if (args.initiatorAddress !== undefined && args.initiatorAddress !== null) {
      this.initiatorAddress = args.initiatorAddress;
    }
    if (args.invokedContract !== undefined && args.invokedContract !== null) {
      this.invokedContract = new ttypes.SmartContractBinary(args.invokedContract);
    }
    if (args.methods !== undefined && args.methods !== null) {
      this.methods = Thrift.copyList(args.methods, [ttypes.MethodHeader]);
    }
    if (args.executionTime !== undefined && args.executionTime !== null) {
      this.executionTime = args.executionTime;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
ContractExecutor_executeByteCode_args.prototype = {};
ContractExecutor_executeByteCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.initiatorAddress = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invokedContract = new ttypes.SmartContractBinary();
        this.invokedContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.methods = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new ttypes.MethodHeader();
          elem74.read(input);
          this.methods.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.executionTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCode_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCode_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  if (this.initiatorAddress !== null && this.initiatorAddress !== undefined) {
    output.writeFieldBegin('initiatorAddress', Thrift.Type.STRING, 2);
    output.writeBinary(this.initiatorAddress);
    output.writeFieldEnd();
  }
  if (this.invokedContract !== null && this.invokedContract !== undefined) {
    output.writeFieldBegin('invokedContract', Thrift.Type.STRUCT, 3);
    this.invokedContract.write(output);
    output.writeFieldEnd();
  }
  if (this.methods !== null && this.methods !== undefined) {
    output.writeFieldBegin('methods', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.methods.length);
    for (var iter75 in this.methods)
    {
      if (this.methods.hasOwnProperty(iter75))
      {
        iter75 = this.methods[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.executionTime !== null && this.executionTime !== undefined) {
    output.writeFieldBegin('executionTime', Thrift.Type.I64, 5);
    output.writeI64(this.executionTime);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 6);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_executeByteCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExecuteByteCodeResult(args.success);
    }
  }
};
ContractExecutor_executeByteCode_result.prototype = {};
ContractExecutor_executeByteCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExecuteByteCodeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCode_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_executeByteCodeMultiple_args = function(args) {
  this.accessId = null;
  this.initiatorAddress = null;
  this.invokedContract = null;
  this.method = null;
  this.params = null;
  this.executionTime = null;
  this.version = null;
  if (args) {
    if (args.accessId !== undefined && args.accessId !== null) {
      this.accessId = args.accessId;
    }
    if (args.initiatorAddress !== undefined && args.initiatorAddress !== null) {
      this.initiatorAddress = args.initiatorAddress;
    }
    if (args.invokedContract !== undefined && args.invokedContract !== null) {
      this.invokedContract = new ttypes.SmartContractBinary(args.invokedContract);
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [Thrift.copyList, general_ttypes.Variant]);
    }
    if (args.executionTime !== undefined && args.executionTime !== null) {
      this.executionTime = args.executionTime;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
ContractExecutor_executeByteCodeMultiple_args.prototype = {};
ContractExecutor_executeByteCodeMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.accessId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.initiatorAddress = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.invokedContract = new ttypes.SmartContractBinary();
        this.invokedContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.params = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          var _size83 = 0;
          var _rtmp387;
          elem82 = [];
          var _etype86 = 0;
          _rtmp387 = input.readListBegin();
          _etype86 = _rtmp387.etype;
          _size83 = _rtmp387.size;
          for (var _i88 = 0; _i88 < _size83; ++_i88)
          {
            var elem89 = null;
            elem89 = new general_ttypes.Variant();
            elem89.read(input);
            elem82.push(elem89);
          }
          input.readListEnd();
          this.params.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.executionTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCodeMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCodeMultiple_args');
  if (this.accessId !== null && this.accessId !== undefined) {
    output.writeFieldBegin('accessId', Thrift.Type.I64, 1);
    output.writeI64(this.accessId);
    output.writeFieldEnd();
  }
  if (this.initiatorAddress !== null && this.initiatorAddress !== undefined) {
    output.writeFieldBegin('initiatorAddress', Thrift.Type.STRING, 2);
    output.writeBinary(this.initiatorAddress);
    output.writeFieldEnd();
  }
  if (this.invokedContract !== null && this.invokedContract !== undefined) {
    output.writeFieldBegin('invokedContract', Thrift.Type.STRUCT, 3);
    this.invokedContract.write(output);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 4);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.LIST, this.params.length);
    for (var iter90 in this.params)
    {
      if (this.params.hasOwnProperty(iter90))
      {
        iter90 = this.params[iter90];
        output.writeListBegin(Thrift.Type.STRUCT, iter90.length);
        for (var iter91 in iter90)
        {
          if (iter90.hasOwnProperty(iter91))
          {
            iter91 = iter90[iter91];
            iter91.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.executionTime !== null && this.executionTime !== undefined) {
    output.writeFieldBegin('executionTime', Thrift.Type.I64, 6);
    output.writeI64(this.executionTime);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 7);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_executeByteCodeMultiple_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExecuteByteCodeMultipleResult(args.success);
    }
  }
};
ContractExecutor_executeByteCodeMultiple_result.prototype = {};
ContractExecutor_executeByteCodeMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExecuteByteCodeMultipleResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCodeMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCodeMultiple_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_getContractMethods_args = function(args) {
  this.byteCodeObjects = null;
  this.version = null;
  if (args) {
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [general_ttypes.ByteCodeObject]);
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
ContractExecutor_getContractMethods_args.prototype = {};
ContractExecutor_getContractMethods_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.byteCodeObjects = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new general_ttypes.ByteCodeObject();
          elem98.read(input);
          this.byteCodeObjects.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractMethods_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractMethods_args');
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter99 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter99))
      {
        iter99 = this.byteCodeObjects[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 2);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_getContractMethods_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetContractMethodsResult(args.success);
    }
  }
};
ContractExecutor_getContractMethods_result.prototype = {};
ContractExecutor_getContractMethods_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetContractMethodsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractMethods_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractMethods_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_getContractVariables_args = function(args) {
  this.byteCodeObjects = null;
  this.contractState = null;
  this.version = null;
  if (args) {
    if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
      this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [general_ttypes.ByteCodeObject]);
    }
    if (args.contractState !== undefined && args.contractState !== null) {
      this.contractState = args.contractState;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
ContractExecutor_getContractVariables_args.prototype = {};
ContractExecutor_getContractVariables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.byteCodeObjects = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = new general_ttypes.ByteCodeObject();
          elem106.read(input);
          this.byteCodeObjects.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contractState = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractVariables_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractVariables_args');
  if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
    output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
    for (var iter107 in this.byteCodeObjects)
    {
      if (this.byteCodeObjects.hasOwnProperty(iter107))
      {
        iter107 = this.byteCodeObjects[iter107];
        iter107.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contractState !== null && this.contractState !== undefined) {
    output.writeFieldBegin('contractState', Thrift.Type.STRING, 2);
    output.writeBinary(this.contractState);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 3);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_getContractVariables_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetContractVariablesResult(args.success);
    }
  }
};
ContractExecutor_getContractVariables_result.prototype = {};
ContractExecutor_getContractVariables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetContractVariablesResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractVariables_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractVariables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_compileSourceCode_args = function(args) {
  this.sourceCode = null;
  this.version = null;
  if (args) {
    if (args.sourceCode !== undefined && args.sourceCode !== null) {
      this.sourceCode = args.sourceCode;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
ContractExecutor_compileSourceCode_args.prototype = {};
ContractExecutor_compileSourceCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_compileSourceCode_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_compileSourceCode_args');
  if (this.sourceCode !== null && this.sourceCode !== undefined) {
    output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 1);
    output.writeString(this.sourceCode);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 2);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_compileSourceCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CompileSourceCodeResult(args.success);
    }
  }
};
ContractExecutor_compileSourceCode_result.prototype = {};
ContractExecutor_compileSourceCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CompileSourceCodeResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_compileSourceCode_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_compileSourceCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_getExecutorBuildVersion_args = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
ContractExecutor_getExecutorBuildVersion_args.prototype = {};
ContractExecutor_getExecutorBuildVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getExecutorBuildVersion_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getExecutorBuildVersion_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 1);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutor_getExecutorBuildVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExecutorBuildVersionResult(args.success);
    }
  }
};
ContractExecutor_getExecutorBuildVersion_result.prototype = {};
ContractExecutor_getExecutorBuildVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExecutorBuildVersionResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getExecutorBuildVersion_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getExecutorBuildVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContractExecutorClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ContractExecutorClient.prototype = {};
ContractExecutorClient.prototype.seqid = function() { return this._seqid; };
ContractExecutorClient.prototype.new_seqid = function() { return this._seqid += 1; };
ContractExecutorClient.prototype.executeByteCode = function(accessId, initiatorAddress, invokedContract, methods, executionTime, version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executeByteCode(accessId, initiatorAddress, invokedContract, methods, executionTime, version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executeByteCode(accessId, initiatorAddress, invokedContract, methods, executionTime, version);
  }
};

ContractExecutorClient.prototype.send_executeByteCode = function(accessId, initiatorAddress, invokedContract, methods, executionTime, version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('executeByteCode', Thrift.MessageType.CALL, this.seqid());
  var params = {
    accessId: accessId,
    initiatorAddress: initiatorAddress,
    invokedContract: invokedContract,
    methods: methods,
    executionTime: executionTime,
    version: version
  };
  var args = new ContractExecutor_executeByteCode_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContractExecutorClient.prototype.recv_executeByteCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContractExecutor_executeByteCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executeByteCode failed: unknown result');
};
ContractExecutorClient.prototype.executeByteCodeMultiple = function(accessId, initiatorAddress, invokedContract, method, params, executionTime, version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_executeByteCodeMultiple(accessId, initiatorAddress, invokedContract, method, params, executionTime, version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_executeByteCodeMultiple(accessId, initiatorAddress, invokedContract, method, params, executionTime, version);
  }
};

ContractExecutorClient.prototype.send_executeByteCodeMultiple = function(accessId, initiatorAddress, invokedContract, method, params, executionTime, version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('executeByteCodeMultiple', Thrift.MessageType.CALL, this.seqid());
  var params = {
    accessId: accessId,
    initiatorAddress: initiatorAddress,
    invokedContract: invokedContract,
    method: method,
    params: params,
    executionTime: executionTime,
    version: version
  };
  var args = new ContractExecutor_executeByteCodeMultiple_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContractExecutorClient.prototype.recv_executeByteCodeMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContractExecutor_executeByteCodeMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('executeByteCodeMultiple failed: unknown result');
};
ContractExecutorClient.prototype.getContractMethods = function(byteCodeObjects, version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContractMethods(byteCodeObjects, version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContractMethods(byteCodeObjects, version);
  }
};

ContractExecutorClient.prototype.send_getContractMethods = function(byteCodeObjects, version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContractMethods', Thrift.MessageType.CALL, this.seqid());
  var params = {
    byteCodeObjects: byteCodeObjects,
    version: version
  };
  var args = new ContractExecutor_getContractMethods_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContractExecutorClient.prototype.recv_getContractMethods = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContractExecutor_getContractMethods_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContractMethods failed: unknown result');
};
ContractExecutorClient.prototype.getContractVariables = function(byteCodeObjects, contractState, version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContractVariables(byteCodeObjects, contractState, version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContractVariables(byteCodeObjects, contractState, version);
  }
};

ContractExecutorClient.prototype.send_getContractVariables = function(byteCodeObjects, contractState, version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContractVariables', Thrift.MessageType.CALL, this.seqid());
  var params = {
    byteCodeObjects: byteCodeObjects,
    contractState: contractState,
    version: version
  };
  var args = new ContractExecutor_getContractVariables_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContractExecutorClient.prototype.recv_getContractVariables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContractExecutor_getContractVariables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContractVariables failed: unknown result');
};
ContractExecutorClient.prototype.compileSourceCode = function(sourceCode, version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_compileSourceCode(sourceCode, version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_compileSourceCode(sourceCode, version);
  }
};

ContractExecutorClient.prototype.send_compileSourceCode = function(sourceCode, version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compileSourceCode', Thrift.MessageType.CALL, this.seqid());
  var params = {
    sourceCode: sourceCode,
    version: version
  };
  var args = new ContractExecutor_compileSourceCode_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContractExecutorClient.prototype.recv_compileSourceCode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContractExecutor_compileSourceCode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('compileSourceCode failed: unknown result');
};
ContractExecutorClient.prototype.getExecutorBuildVersion = function(version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getExecutorBuildVersion(version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getExecutorBuildVersion(version);
  }
};

ContractExecutorClient.prototype.send_getExecutorBuildVersion = function(version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getExecutorBuildVersion', Thrift.MessageType.CALL, this.seqid());
  var params = {
    version: version
  };
  var args = new ContractExecutor_getExecutorBuildVersion_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ContractExecutorClient.prototype.recv_getExecutorBuildVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ContractExecutor_getExecutorBuildVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getExecutorBuildVersion failed: unknown result');
};
var ContractExecutorProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ContractExecutorProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ContractExecutorProcessor.prototype.process_executeByteCode = function(seqid, input, output) {
  var args = new ContractExecutor_executeByteCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executeByteCode.length === 6) {
    Q.fcall(this._handler.executeByteCode.bind(this._handler), args.accessId, args.initiatorAddress, args.invokedContract, args.methods, args.executionTime, args.version)
      .then(function(result) {
        var result_obj = new ContractExecutor_executeByteCode_result({success: result});
        output.writeMessageBegin("executeByteCode", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeByteCode", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.executeByteCode(args.accessId, args.initiatorAddress, args.invokedContract, args.methods, args.executionTime, args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContractExecutor_executeByteCode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executeByteCode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeByteCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContractExecutorProcessor.prototype.process_executeByteCodeMultiple = function(seqid, input, output) {
  var args = new ContractExecutor_executeByteCodeMultiple_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.executeByteCodeMultiple.length === 7) {
    Q.fcall(this._handler.executeByteCodeMultiple.bind(this._handler), args.accessId, args.initiatorAddress, args.invokedContract, args.method, args.params, args.executionTime, args.version)
      .then(function(result) {
        var result_obj = new ContractExecutor_executeByteCodeMultiple_result({success: result});
        output.writeMessageBegin("executeByteCodeMultiple", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeByteCodeMultiple", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.executeByteCodeMultiple(args.accessId, args.initiatorAddress, args.invokedContract, args.method, args.params, args.executionTime, args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContractExecutor_executeByteCodeMultiple_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("executeByteCodeMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("executeByteCodeMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContractExecutorProcessor.prototype.process_getContractMethods = function(seqid, input, output) {
  var args = new ContractExecutor_getContractMethods_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContractMethods.length === 2) {
    Q.fcall(this._handler.getContractMethods.bind(this._handler), args.byteCodeObjects, args.version)
      .then(function(result) {
        var result_obj = new ContractExecutor_getContractMethods_result({success: result});
        output.writeMessageBegin("getContractMethods", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContractMethods", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContractMethods(args.byteCodeObjects, args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContractExecutor_getContractMethods_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getContractMethods", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContractMethods", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContractExecutorProcessor.prototype.process_getContractVariables = function(seqid, input, output) {
  var args = new ContractExecutor_getContractVariables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContractVariables.length === 3) {
    Q.fcall(this._handler.getContractVariables.bind(this._handler), args.byteCodeObjects, args.contractState, args.version)
      .then(function(result) {
        var result_obj = new ContractExecutor_getContractVariables_result({success: result});
        output.writeMessageBegin("getContractVariables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContractVariables", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContractVariables(args.byteCodeObjects, args.contractState, args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContractExecutor_getContractVariables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getContractVariables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getContractVariables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContractExecutorProcessor.prototype.process_compileSourceCode = function(seqid, input, output) {
  var args = new ContractExecutor_compileSourceCode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.compileSourceCode.length === 2) {
    Q.fcall(this._handler.compileSourceCode.bind(this._handler), args.sourceCode, args.version)
      .then(function(result) {
        var result_obj = new ContractExecutor_compileSourceCode_result({success: result});
        output.writeMessageBegin("compileSourceCode", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("compileSourceCode", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.compileSourceCode(args.sourceCode, args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContractExecutor_compileSourceCode_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("compileSourceCode", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("compileSourceCode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ContractExecutorProcessor.prototype.process_getExecutorBuildVersion = function(seqid, input, output) {
  var args = new ContractExecutor_getExecutorBuildVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getExecutorBuildVersion.length === 1) {
    Q.fcall(this._handler.getExecutorBuildVersion.bind(this._handler), args.version)
      .then(function(result) {
        var result_obj = new ContractExecutor_getExecutorBuildVersion_result({success: result});
        output.writeMessageBegin("getExecutorBuildVersion", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getExecutorBuildVersion", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getExecutorBuildVersion(args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ContractExecutor_getExecutorBuildVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getExecutorBuildVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getExecutorBuildVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
